{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IConstantFlowAgreementV1.sol": {
      "content": "pragma solidity ^0.4.24;\n\nimport \"./ISuperfluidToken.sol\";\n\ncontract IConstantFlowAgreementV1 {\n    event FlowUpdated(\n        ISuperfluidToken indexed token,\n        address indexed sender,\n        address indexed receiver,\n        int96 flowRate,\n        int256 totalSenderFlowRate,\n        int256 totalReceiverFlowRate,\n        bytes userData\n    );\n\n    function createFlow(\n        ISuperfluidToken token,\n        address receiver,\n        int96 flowRate,\n        bytes ctx\n    ) external returns (bytes memory newCtx);\n\n    function updateFlow(\n        ISuperfluidToken token,\n        address receiver,\n        int96 flowRate,\n        bytes ctx\n    ) external returns (bytes memory newCtx);\n\n    function deleteFlow(\n        ISuperfluidToken token,\n        address sender,\n        address receiver,\n        bytes ctx\n    ) external returns (bytes memory newCtx);\n\n    function getFlow(\n        ISuperfluidToken token,\n        address sender,\n        address receiver\n    )\n        external\n        view\n        returns (\n            uint256 timestamp,\n            int96 flowRate,\n            uint256 deposit,\n            uint256 owedDeposit\n        );\n\n    function getDepositRequiredForFlowRate(ISuperfluidToken token, int96 flowRate)\n        external\n        view\n        returns (uint256 deposit);\n}\n"
    },
    "contracts/interfaces/ISuperfluidToken.sol": {
      "content": "pragma solidity ^0.4.24;\n\ncontract ISuperfluidToken {\n    function getHost() external view returns (address host);\n\n    function realtimeBalanceOf(address account, uint256 timestamp)\n        public\n        view\n        returns (\n            int256 availableBalance,\n            uint256 deposit,\n            uint256 owedDeposit\n        );\n}\n"
    },
    "contracts/Superfluid.sol": {
      "content": "pragma solidity ^0.4.24;\n\nimport \"@aragon/os/contracts/apps/AragonApp.sol\";\nimport \"@aragon/apps-agent/contracts/Agent.sol\";\n\nimport \"./interfaces/IConstantFlowAgreementV1.sol\";\nimport \"./interfaces/ISuperfluid.sol\";\nimport \"./interfaces/ISuperToken.sol\";\n\ncontract Superfluid is AragonApp {\n    /**\n    Hardcoded constants to save gas\n        bytes32 public constant MANAGE_STREAMS_ROLE = keccak256(\"MANAGE_STREAMS_ROLE\");\n        bytes32 public constant SET_AGENT_ROLE = keccak256(\"SET_AGENT_ROLE\");\n    */\n    bytes32 public constant MANAGE_STREAMS_ROLE = 0x56c3496db27efc6d83ab1a24218f016191aab8835d442bc0fa8502f327132cbe;\n    bytes32 public constant SET_AGENT_ROLE = 0xf57d195c0663dd0e8a2210bb519e2b7de35301795015198efff16e9a2be238c8;\n\n    string private constant ERROR_AGENT_NOT_CONTRACT = \"SUPERFLUID_AGENT_NOT_CONTRACT\";\n    string private constant ERROR_HOST_NOT_CONTRACT = \"SUPERFLUID_HOST_NOT_CONTRACT\";\n    string private constant ERROR_CFA_NOT_CONTRACT = \"SUPERFLUID_CFA_NOT_CONTRACT\";\n    string private constant ERROR_SUPERTOKEN_NOT_CONTRACT = \"SUPERFLUID_SUPERTOKEN_NOT_CONTRACT\";\n    string private constant ERROR_INVALID_SUPERTOKEN = \"SUPERFLUID_INVALID_SUPERTOKEN\";\n    string private constant ERROR_DEPOSIT_AMOUNT_ZERO = \"SUPERFLUID_DEPOSIT_AMOUNT_ZERO\";\n    string private constant ERROR_WITHDRAW_AMOUNT_ZERO = \"SUPERFLUID_WITHDRAW_AMOUNT_ZERO\";\n    string private constant ERROR_SUPERTOKEN_APPROVE_FAILED = \"SUPERFLUID_SUPERTOKEN_APPROVE_FAILED\";\n    string private constant ERROR_SUPERTOKEN_TRANSFER_FROM_REVERTED = \"SUPERFLUID_SUPERTOKEN_TRANSFER_FROM_REVERT\";\n    string private constant ERROR_SENDER_CAN_NOT_DELETE_FLOW = \"SUPERFLUID_SENDER_CAN_NOT_DELETE_FLOW\";\n\n    // Superfluid data\n    ISuperfluid public host;\n    IConstantFlowAgreementV1 public cfa; // Constant Flow Agreement\n\n    Agent public agent;\n\n    event NewAgentSet(Agent agent);\n\n    modifier isValidSuperToken(ISuperToken _token) {\n        require(isContract(address(_token)), ERROR_SUPERTOKEN_NOT_CONTRACT);\n\n        (bool success, ) = staticInvoke(address(_token), abi.encodeWithSelector(_token.getHost.selector));\n        require(success, ERROR_INVALID_SUPERTOKEN);\n        _;\n    }\n\n    function initialize(\n        Agent _agent,\n        ISuperfluid _host,\n        IConstantFlowAgreementV1 _cfa\n    ) external onlyInit {\n        require(isContract(address(_agent)), ERROR_AGENT_NOT_CONTRACT);\n        require(isContract(address(_host)), ERROR_HOST_NOT_CONTRACT);\n        require(isContract(address(_cfa)), ERROR_CFA_NOT_CONTRACT);\n\n        agent = _agent;\n        host = _host;\n        cfa = _cfa;\n\n        initialized();\n    }\n\n    /**\n    * @notice Deposit `@tokenAmount(_token, _amount)`.\n    * @param _token Address of deposited super token\n    * @param _amount Amount of tokens sent\n    * @param _isExternalDeposit Flag that indicates wether the assets are already in the app\n    */\n    function deposit(\n        ISuperToken _token,\n        uint256 _amount,\n        bool _isExternalDeposit\n    ) external isInitialized isValidSuperToken(_token) {\n        require(_amount > 0, ERROR_DEPOSIT_AMOUNT_ZERO);\n\n        // External deposit will be false when the assets were already in the Finance app\n        // and just need to be transferred to the Agent\n        if (_isExternalDeposit) {\n            // This assumes the sender has approved the tokens for Finance\n            require(_token.transferFrom(msg.sender, address(this), _amount), ERROR_SUPERTOKEN_TRANSFER_FROM_REVERTED);\n        }\n        // Approve the tokens for the Agent (it does the actual transferring)\n        require(_token.approve(agent, _amount), ERROR_SUPERTOKEN_APPROVE_FAILED);\n        // Finally, initiate the deposit\n        agent.deposit(_token, _amount);\n    }\n\n    /**\n    * @notice Withdraw `@tokenAmount(_token, _amount)` to `_receiver`.\n    * @param _token Address of withdrawed super token\n    * @param _receiver Receiver of the withdrawed amount\n    * @param _amount Amount of tokens received\n    */\n    function withdraw(\n        ISuperToken _token,\n        address _receiver,\n        uint256 _amount\n    ) external auth(MANAGE_STREAMS_ROLE) isValidSuperToken(_token) {\n        require(_amount > 0, ERROR_WITHDRAW_AMOUNT_ZERO);\n\n        agent.transfer(_token, _receiver, _amount);\n    }\n\n    /**\n    * @notice Create a new `_token.symbol(): string` flow with a rate of `@tokenAmount(_token, _flowRate  * 30 * 24 * 3600, false)` tokens per second to `_receiver`.\n    * @param _token Address of super token\n    * @param _receiver Receiver of the flow\n    * @param _flowRate Flow's rate of tokens per second\n    * @param _description Codified string containing the flow's description\n    */\n    function createFlow(\n        ISuperToken _token,\n        address _receiver,\n        int96 _flowRate,\n        bytes _description\n    ) external auth(MANAGE_STREAMS_ROLE) isValidSuperToken(_token) {\n        bytes memory encodedAgreementCall = abi.encodeWithSelector(\n            cfa.createFlow.selector,\n            _token,\n            _receiver,\n            _flowRate,\n            new bytes(0)\n        );\n\n        callAgreement(encodedAgreementCall, _description);\n    }\n\n    /**\n    * @notice Update `_token.symbol(): string` flow to `_receiver`  with a new rate of `@tokenAmount(_token, _flowRate, false)` tokens per second.\n    * @param _token Address of super token\n    * @param _receiver Receiver of the flow\n    * @param _flowRate Flow's rate of tokens per second\n    * @param _description Codified string containing the flow's description\n    */\n    function updateFlow(\n        ISuperToken _token,\n        address _receiver,\n        int96 _flowRate,\n        bytes _description\n    ) external auth(MANAGE_STREAMS_ROLE) isValidSuperToken(_token) {\n        bytes memory encodedAgreementCall = abi.encodeWithSelector(\n            cfa.updateFlow.selector,\n            _token,\n            _receiver,\n            _flowRate,\n            new bytes(0)\n        );\n\n        callAgreement(encodedAgreementCall, _description);\n    }\n\n    /**\n    * @notice Delete `_token.symbol(): string` flow to `_receiver`.\n    * @param _token Address of Super Token\n    * @param _receiver Receiver of the flow\n    */\n    function deleteFlow(ISuperToken _token, address _receiver) external auth(MANAGE_STREAMS_ROLE) isValidSuperToken(_token) {\n        bytes memory encodedAgreementCall = abi.encodeWithSelector(\n            cfa.deleteFlow.selector,\n            _token,\n            agent,\n            _receiver,\n            new bytes(0)\n        );\n\n        callAgreement(encodedAgreementCall, new bytes(0));\n    }\n\n    /**\n    * @notice Delete `_token.symbol(): string` flow.\n    * @param _token Address of Super Token\n    */\n    function deleteOwnFlow(ISuperToken _token) external isInitialized isValidSuperToken(_token) {\n        // Check that sender is part of the flow.\n        (uint256 timestamp, , , ) = cfa.getFlow(_token, agent, msg.sender);\n        require(timestamp != 0, ERROR_SENDER_CAN_NOT_DELETE_FLOW);\n\n        bytes memory encodedAgreementCall = abi.encodeWithSelector(\n            cfa.deleteFlow.selector,\n            _token,\n            agent,\n            msg.sender,\n            new bytes(0)\n        );\n\n        callAgreement(encodedAgreementCall, new bytes(0));\n    }\n\n    function setAgent(Agent _agent) external auth(SET_AGENT_ROLE) {\n        require(isContract(address(_agent)), ERROR_AGENT_NOT_CONTRACT);\n        agent = _agent;\n\n        emit NewAgentSet(_agent);\n    }\n\n    function callAgreement(bytes encodedAgreementCall, bytes _description) internal {\n        agent.safeExecute(\n            host,\n            abi.encodeWithSelector(host.callAgreement.selector, cfa, encodedAgreementCall, _description)\n        );\n    }\n\n    function staticInvoke(address _addr, bytes memory _calldata) internal view returns (bool, uint256) {\n        bool success;\n        uint256 ret;\n        assembly {\n            let ptr := mload(0x40) // free memory pointer\n\n            success := staticcall(\n                gas, // forward all gas\n                _addr, // address\n                add(_calldata, 0x20), // calldata start\n                mload(_calldata), // calldata length\n                ptr, // write output over free memory\n                0x20 // uint256 return\n            )\n\n            if gt(success, 0) {\n                ret := mload(ptr)\n            }\n        }\n        return (success, ret);\n    }\n}\n"
    },
    "@aragon/os/contracts/apps/AragonApp.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"./AppStorage.sol\";\nimport \"../acl/ACLSyntaxSugar.sol\";\nimport \"../common/Autopetrified.sol\";\nimport \"../common/ConversionHelpers.sol\";\nimport \"../common/ReentrancyGuard.sol\";\nimport \"../common/VaultRecoverable.sol\";\nimport \"../evmscript/EVMScriptRunner.sol\";\n\n\n// Contracts inheriting from AragonApp are, by default, immediately petrified upon deployment so\n// that they can never be initialized.\n// Unless overriden, this behaviour enforces those contracts to be usable only behind an AppProxy.\n// ReentrancyGuard, EVMScriptRunner, and ACLSyntaxSugar are not directly used by this contract, but\n// are included so that they are automatically usable by subclassing contracts\ncontract AragonApp is AppStorage, Autopetrified, VaultRecoverable, ReentrancyGuard, EVMScriptRunner, ACLSyntaxSugar {\n    string private constant ERROR_AUTH_FAILED = \"APP_AUTH_FAILED\";\n\n    modifier auth(bytes32 _role) {\n        require(canPerform(msg.sender, _role, new uint256[](0)), ERROR_AUTH_FAILED);\n        _;\n    }\n\n    modifier authP(bytes32 _role, uint256[] _params) {\n        require(canPerform(msg.sender, _role, _params), ERROR_AUTH_FAILED);\n        _;\n    }\n\n    /**\n    * @dev Check whether an action can be performed by a sender for a particular role on this app\n    * @param _sender Sender of the call\n    * @param _role Role on this app\n    * @param _params Permission params for the role\n    * @return Boolean indicating whether the sender has the permissions to perform the action.\n    *         Always returns false if the app hasn't been initialized yet.\n    */\n    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\n        if (!hasInitialized()) {\n            return false;\n        }\n\n        IKernel linkedKernel = kernel();\n        if (address(linkedKernel) == address(0)) {\n            return false;\n        }\n\n        return linkedKernel.hasPermission(\n            _sender,\n            address(this),\n            _role,\n            ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)\n        );\n    }\n\n    /**\n    * @dev Get the recovery vault for the app\n    * @return Recovery vault address for the app\n    */\n    function getRecoveryVault() public view returns (address) {\n        // Funds recovery via a vault is only available when used with a kernel\n        return kernel().getRecoveryVault(); // if kernel is not set, it will revert\n    }\n}\n"
    },
    "@aragon/apps-agent/contracts/Agent.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    GPL-3.0-or-later\n */\n\npragma solidity 0.4.24;\n\nimport \"./SignatureValidator.sol\";\nimport \"./standards/IERC165.sol\";\nimport \"./standards/ERC1271.sol\";\nimport \"./standards/IERC721Receiver.sol\";\n\nimport \"@aragon/apps-vault/contracts/Vault.sol\";\n\nimport \"@aragon/os/contracts/common/IForwarder.sol\";\n\n\ncontract Agent is IERC165, IERC721Receiver, ERC1271Bytes, IForwarder, IsContract, Vault {\n    /* Hardcoded constants to save gas\n    bytes32 public constant EXECUTE_ROLE = keccak256(\"EXECUTE_ROLE\");\n    bytes32 public constant SAFE_EXECUTE_ROLE = keccak256(\"SAFE_EXECUTE_ROLE\");\n    bytes32 public constant ADD_PROTECTED_TOKEN_ROLE = keccak256(\"ADD_PROTECTED_TOKEN_ROLE\");\n    bytes32 public constant REMOVE_PROTECTED_TOKEN_ROLE = keccak256(\"REMOVE_PROTECTED_TOKEN_ROLE\");\n    bytes32 public constant ADD_PRESIGNED_HASH_ROLE = keccak256(\"ADD_PRESIGNED_HASH_ROLE\");\n    bytes32 public constant DESIGNATE_SIGNER_ROLE = keccak256(\"DESIGNATE_SIGNER_ROLE\");\n    bytes32 public constant RUN_SCRIPT_ROLE = keccak256(\"RUN_SCRIPT_ROLE\");\n    */\n\n    bytes32 public constant EXECUTE_ROLE = 0xcebf517aa4440d1d125e0355aae64401211d0848a23c02cc5d29a14822580ba4;\n    bytes32 public constant SAFE_EXECUTE_ROLE = 0x0a1ad7b87f5846153c6d5a1f761d71c7d0cfd122384f56066cd33239b7933694;\n    bytes32 public constant ADD_PROTECTED_TOKEN_ROLE = 0x6eb2a499556bfa2872f5aa15812b956cc4a71b4d64eb3553f7073c7e41415aaa;\n    bytes32 public constant REMOVE_PROTECTED_TOKEN_ROLE = 0x71eee93d500f6f065e38b27d242a756466a00a52a1dbcd6b4260f01a8640402a;\n    bytes32 public constant ADD_PRESIGNED_HASH_ROLE = 0x0b29780bb523a130b3b01f231ef49ed2fa2781645591a0b0a44ca98f15a5994c;\n    bytes32 public constant DESIGNATE_SIGNER_ROLE = 0x23ce341656c3f14df6692eebd4757791e33662b7dcf9970c8308303da5472b7c;\n    bytes32 public constant RUN_SCRIPT_ROLE = 0xb421f7ad7646747f3051c50c0b8e2377839296cd4973e27f63821d73e390338f;\n\n    uint256 public constant PROTECTED_TOKENS_CAP = 10;\n\n    bytes4 private constant ERC165_INTERFACE_ID = 0x01ffc9a7;\n    bytes4 private constant ERC721_RECEIVED_INTERFACE_ID = 0x150b7a02; // bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))\n\n    string private constant ERROR_TARGET_PROTECTED = \"AGENT_TARGET_PROTECTED\";\n    string private constant ERROR_PROTECTED_TOKENS_MODIFIED = \"AGENT_PROTECTED_TOKENS_MODIFIED\";\n    string private constant ERROR_PROTECTED_BALANCE_LOWERED = \"AGENT_PROTECTED_BALANCE_LOWERED\";\n    string private constant ERROR_TOKENS_CAP_REACHED = \"AGENT_TOKENS_CAP_REACHED\";\n    string private constant ERROR_TOKEN_NOT_ERC20 = \"AGENT_TOKEN_NOT_ERC20\";\n    string private constant ERROR_TOKEN_ALREADY_PROTECTED = \"AGENT_TOKEN_ALREADY_PROTECTED\";\n    string private constant ERROR_TOKEN_NOT_PROTECTED = \"AGENT_TOKEN_NOT_PROTECTED\";\n    string private constant ERROR_DESIGNATED_TO_SELF = \"AGENT_DESIGNATED_TO_SELF\";\n    string private constant ERROR_CAN_NOT_FORWARD = \"AGENT_CAN_NOT_FORWARD\";\n\n    mapping (bytes32 => bool) public isPresigned;\n    address public designatedSigner;\n    address[] public protectedTokens;\n\n    event SafeExecute(address indexed sender, address indexed target, bytes data);\n    event Execute(address indexed sender, address indexed target, uint256 ethValue, bytes data);\n    event AddProtectedToken(address indexed token);\n    event RemoveProtectedToken(address indexed token);\n    event PresignHash(address indexed sender, bytes32 indexed hash);\n    event SetDesignatedSigner(address indexed sender, address indexed oldSigner, address indexed newSigner);\n    event ReceiveERC721(address indexed token, address indexed operator, address indexed from, uint256 tokenId, bytes data);\n\n    /**\n    * @notice Execute '`@radspec(_target, _data)`' on `_target``_ethValue == 0 ? '' : ' (Sending ' + @tokenAmount(0x0000000000000000000000000000000000000000, _ethValue) + ')'`\n    * @param _target Address where the action is being executed\n    * @param _ethValue Amount of ETH from the contract that is sent with the action\n    * @param _data Calldata for the action\n    * @return Exits call frame forwarding the return data of the executed call (either error or success data)\n    */\n    function execute(address _target, uint256 _ethValue, bytes _data)\n        external // This function MUST always be external as the function performs a low level return, exiting the Agent app execution context\n        authP(EXECUTE_ROLE, arr(_target, _ethValue, uint256(_getSig(_data)))) // bytes4 casted as uint256 sets the bytes as the LSBs\n    {\n        bool result = _target.call.value(_ethValue)(_data);\n\n        if (result) {\n            emit Execute(msg.sender, _target, _ethValue, _data);\n        }\n\n        assembly {\n            let ptr := mload(0x40)\n            returndatacopy(ptr, 0, returndatasize)\n\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\n            // if the call returned error data, forward it\n            switch result case 0 { revert(ptr, returndatasize) }\n            default { return(ptr, returndatasize) }\n        }\n    }\n\n    /**\n    * @notice Execute '`@radspec(_target, _data)`' on `_target`, ensuring that protected tokens can't be spent\n    * @param _target Address where the action is being executed\n    * @param _data Calldata for the action\n    * @return Exits call frame forwarding the return data of the executed call (either error or success data)\n    */\n    function safeExecute(address _target, bytes _data)\n        external // This function MUST always be external as the function performs a low level return, exiting the Agent app execution context\n        authP(SAFE_EXECUTE_ROLE, arr(_target, uint256(_getSig(_data)))) // bytes4 casted as uint256 sets the bytes as the LSBs\n    {\n        uint256 protectedTokensLength = protectedTokens.length;\n        address[] memory protectedTokens_ = new address[](protectedTokensLength);\n        uint256[] memory balances = new uint256[](protectedTokensLength);\n\n        for (uint256 i = 0; i < protectedTokensLength; i++) {\n            address token = protectedTokens[i];\n            require(_target != token, ERROR_TARGET_PROTECTED);\n            // we copy the protected tokens array to check whether the storage array has been modified during the underlying call\n            protectedTokens_[i] = token;\n            // we copy the balances to check whether they have been modified during the underlying call\n            balances[i] = balance(token);\n        }\n\n        bool result = _target.call(_data);\n\n        bytes32 ptr;\n        uint256 size;\n        assembly {\n            size := returndatasize\n            ptr := mload(0x40)\n            mstore(0x40, add(ptr, returndatasize))\n            returndatacopy(ptr, 0, returndatasize)\n        }\n\n        if (result) {\n            // if the underlying call has succeeded, we check that the protected tokens\n            // and their balances have not been modified and return the call's return data\n            require(protectedTokens.length == protectedTokensLength, ERROR_PROTECTED_TOKENS_MODIFIED);\n            for (uint256 j = 0; j < protectedTokensLength; j++) {\n                require(protectedTokens[j] == protectedTokens_[j], ERROR_PROTECTED_TOKENS_MODIFIED);\n                require(balance(protectedTokens[j]) >= balances[j], ERROR_PROTECTED_BALANCE_LOWERED);\n            }\n\n            emit SafeExecute(msg.sender, _target, _data);\n\n            assembly {\n                return(ptr, size)\n            }\n        } else {\n            // if the underlying call has failed, we revert and forward returned error data\n            assembly {\n                revert(ptr, size)\n            }\n        }\n    }\n\n    /**\n    * @notice Add `_token.symbol(): string` to the list of protected tokens\n    * @param _token Address of the token to be protected\n    */\n    function addProtectedToken(address _token) external authP(ADD_PROTECTED_TOKEN_ROLE, arr(_token)) {\n        require(protectedTokens.length < PROTECTED_TOKENS_CAP, ERROR_TOKENS_CAP_REACHED);\n        require(_isERC20(_token), ERROR_TOKEN_NOT_ERC20);\n        require(!_tokenIsProtected(_token), ERROR_TOKEN_ALREADY_PROTECTED);\n\n        _addProtectedToken(_token);\n    }\n\n    /**\n    * @notice Remove `_token.symbol(): string` from the list of protected tokens\n    * @param _token Address of the token to be unprotected\n    */\n    function removeProtectedToken(address _token) external authP(REMOVE_PROTECTED_TOKEN_ROLE, arr(_token)) {\n        require(_tokenIsProtected(_token), ERROR_TOKEN_NOT_PROTECTED);\n\n        _removeProtectedToken(_token);\n    }\n\n    /**\n    * @notice Pre-sign hash `_hash`\n    * @param _hash Hash that will be considered signed regardless of the signature checked with 'isValidSignature()'\n    */\n    function presignHash(bytes32 _hash)\n        external\n        authP(ADD_PRESIGNED_HASH_ROLE, arr(_hash))\n    {\n        isPresigned[_hash] = true;\n\n        emit PresignHash(msg.sender, _hash);\n    }\n\n    /**\n    * @notice Set `_designatedSigner` as the designated signer of the app, which will be able to sign messages on behalf of the app\n    * @param _designatedSigner Address that will be able to sign messages on behalf of the app\n    */\n    function setDesignatedSigner(address _designatedSigner)\n        external\n        authP(DESIGNATE_SIGNER_ROLE, arr(_designatedSigner))\n    {\n        // Prevent an infinite loop by setting the app itself as its designated signer.\n        // An undetectable loop can be created by setting a different contract as the\n        // designated signer which calls back into `isValidSignature`.\n        // Given that `isValidSignature` is always called with just 50k gas, the max\n        // damage of the loop is wasting 50k gas.\n        require(_designatedSigner != address(this), ERROR_DESIGNATED_TO_SELF);\n\n        address oldDesignatedSigner = designatedSigner;\n        designatedSigner = _designatedSigner;\n\n        emit SetDesignatedSigner(msg.sender, oldDesignatedSigner, _designatedSigner);\n    }\n\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external returns (bytes4) {\n        emit ReceiveERC721(msg.sender, _operator, _from, _tokenId, _data);\n\n        return ERC721_RECEIVED_INTERFACE_ID;\n    }\n\n    // Forwarding fns\n\n    /**\n    * @notice Tells whether the Agent app is a forwarder or not\n    * @dev IForwarder interface conformance\n    * @return Always true\n    */\n    function isForwarder() external pure returns (bool) {\n        return true;\n    }\n\n    /**\n     * @notice Tells whether this contract supports a given ERC-165 interface\n     * @dev Implements conformance to ERC-165\n     * @param _interfaceId Interface bytes to check\n     * @return True if this contract supports the interface\n     */\n    function supportsInterface(bytes4 _interfaceId) external pure returns (bool) {\n        return\n            _interfaceId == ERC1271_INTERFACE_ID ||\n            _interfaceId == ERC721_RECEIVED_INTERFACE_ID ||\n            _interfaceId == ERC165_INTERFACE_ID;\n    }\n\n    /**\n    * @notice Execute the script as the Agent app\n    * @dev IForwarder interface conformance. Forwards any token holder action.\n    * @param _evmScript Script being executed\n    */\n    function forward(bytes _evmScript) public {\n        require(canForward(msg.sender, _evmScript), ERROR_CAN_NOT_FORWARD);\n\n        bytes memory input = \"\"; // no input\n        address[] memory blacklist = new address[](0); // no addr blacklist, can interact with anything\n        runScript(_evmScript, input, blacklist);\n        // We don't need to emit an event here as EVMScriptRunner will emit ScriptResult if successful\n    }\n\n    /**\n    * @notice Tells whether `_sender` can forward actions or not\n    * @dev IForwarder interface conformance\n    * @param _sender Address of the account intending to forward an action\n    * @return True if the given address can run scripts, false otherwise\n    */\n    function canForward(address _sender, bytes _evmScript) public view returns (bool) {\n        // Note that `canPerform()` implicitly does an initialization check itself\n        return canPerform(_sender, RUN_SCRIPT_ROLE, arr(_getScriptACLParam(_evmScript)));\n    }\n\n    // ERC-1271 conformance\n\n    /**\n     * @notice Tells whether a signature is seen as valid by this contract through ERC-1271\n     * @param _hash Arbitrary length data signed on the behalf of address (this)\n     * @param _signature Signature byte array associated with _data\n     * @return The ERC-1271 magic value if the signature is valid\n     */\n    function isValidSignature(bytes32 _hash, bytes _signature) public view returns (bytes4) {\n        // Short-circuit in case the hash was presigned. Optimization as performing calls\n        // and ecrecover is more expensive than an SLOAD.\n        if (isPresigned[_hash]) {\n            return returnIsValidSignatureMagicNumber(true);\n        }\n\n        bool isValid;\n        if (designatedSigner == address(0)) {\n            isValid = false;\n        } else {\n            isValid = SignatureValidator.isValidSignature(_hash, designatedSigner, _signature);\n        }\n\n        return returnIsValidSignatureMagicNumber(isValid);\n    }\n\n    // Getters\n\n    function getProtectedTokensLength() public view isInitialized returns (uint256) {\n        return protectedTokens.length;\n    }\n\n    // Internal fns\n\n    function _addProtectedToken(address _token) internal {\n        protectedTokens.push(_token);\n\n        emit AddProtectedToken(_token);\n    }\n\n    function _removeProtectedToken(address _token) internal {\n        protectedTokens[_protectedTokenIndex(_token)] = protectedTokens[protectedTokens.length - 1];\n        protectedTokens.length--;\n\n        emit RemoveProtectedToken(_token);\n    }\n\n    function _isERC20(address _token) internal view returns (bool) {\n        if (!isContract(_token)) {\n            return false;\n        }\n\n        // Throwaway sanity check to make sure the token's `balanceOf()` does not error (for now)\n        balance(_token);\n\n        return true;\n    }\n\n    function _protectedTokenIndex(address _token) internal view returns (uint256) {\n        for (uint i = 0; i < protectedTokens.length; i++) {\n            if (protectedTokens[i] == _token) {\n              return i;\n            }\n        }\n\n        revert(ERROR_TOKEN_NOT_PROTECTED);\n    }\n\n    function _tokenIsProtected(address _token) internal view returns (bool) {\n        for (uint256 i = 0; i < protectedTokens.length; i++) {\n            if (protectedTokens[i] == _token) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    function _getScriptACLParam(bytes _evmScript) internal pure returns (uint256) {\n        return uint256(keccak256(abi.encodePacked(_evmScript)));\n    }\n\n    function _getSig(bytes _data) internal pure returns (bytes4 sig) {\n        if (_data.length < 4) {\n            return;\n        }\n\n        assembly { sig := mload(add(_data, 0x20)) }\n    }\n}\n"
    },
    "contracts/interfaces/ISuperfluid.sol": {
      "content": "pragma solidity ^0.4.24;\n\ncontract ISuperfluid {\n    function callAgreement(\n        address agreementClass,\n        bytes callData,\n        bytes userData\n    )\n        external\n        returns (\n            //cleanCtx\n            bytes memory returnedData\n        );\n}\n"
    },
    "contracts/interfaces/ISuperToken.sol": {
      "content": "pragma solidity ^0.4.24;\n\nimport \"./ISuperfluidToken.sol\";\n\ncontract ISuperToken is ISuperfluidToken {\n    function selfMint(\n        address account,\n        uint256 amount,\n        bytes userData\n    ) external;\n\n    function upgrade(uint256 amount) external;\n\n    function downgrade(uint256 amount) external;\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    function balanceOf(address account) external view returns (uint256 balance);\n\n    function decimals() external view returns (uint8);\n\n    function symbol() external view returns (string memory);\n\n    function name() external view returns (string memory);\n\n    function getUnderlyingToken() external view returns (address tokenAddr);\n}\n"
    },
    "@aragon/os/contracts/apps/AppStorage.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"../common/UnstructuredStorage.sol\";\nimport \"../kernel/IKernel.sol\";\n\n\ncontract AppStorage {\n    using UnstructuredStorage for bytes32;\n\n    /* Hardcoded constants to save gas\n    bytes32 internal constant KERNEL_POSITION = keccak256(\"aragonOS.appStorage.kernel\");\n    bytes32 internal constant APP_ID_POSITION = keccak256(\"aragonOS.appStorage.appId\");\n    */\n    bytes32 internal constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;\n    bytes32 internal constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;\n\n    function kernel() public view returns (IKernel) {\n        return IKernel(KERNEL_POSITION.getStorageAddress());\n    }\n\n    function appId() public view returns (bytes32) {\n        return APP_ID_POSITION.getStorageBytes32();\n    }\n\n    function setKernel(IKernel _kernel) internal {\n        KERNEL_POSITION.setStorageAddress(address(_kernel));\n    }\n\n    function setAppId(bytes32 _appId) internal {\n        APP_ID_POSITION.setStorageBytes32(_appId);\n    }\n}\n"
    },
    "@aragon/os/contracts/acl/ACLSyntaxSugar.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ncontract ACLSyntaxSugar {\n    function arr() internal pure returns (uint256[]) {\n        return new uint256[](0);\n    }\n\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\n        return arr(uint256(_a));\n    }\n\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), uint256(_b));\n    }\n\n    function arr(address _a) internal pure returns (uint256[] r) {\n        return arr(uint256(_a));\n    }\n\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), uint256(_b));\n    }\n\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), _b, _c);\n    }\n\n    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), _b, _c, _d);\n    }\n\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), uint256(_b));\n    }\n\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\n    }\n\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), uint256(_b), uint256(_c));\n    }\n\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), uint256(_b), uint256(_c));\n    }\n\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\n        r = new uint256[](1);\n        r[0] = _a;\n    }\n\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\n        r = new uint256[](2);\n        r[0] = _a;\n        r[1] = _b;\n    }\n\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\n        r = new uint256[](3);\n        r[0] = _a;\n        r[1] = _b;\n        r[2] = _c;\n    }\n\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\n        r = new uint256[](4);\n        r[0] = _a;\n        r[1] = _b;\n        r[2] = _c;\n        r[3] = _d;\n    }\n\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\n        r = new uint256[](5);\n        r[0] = _a;\n        r[1] = _b;\n        r[2] = _c;\n        r[3] = _d;\n        r[4] = _e;\n    }\n}\n\n\ncontract ACLHelpers {\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\n        return uint8(_x >> (8 * 30));\n    }\n\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\n        return uint8(_x >> (8 * 31));\n    }\n\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\n        a = uint32(_x);\n        b = uint32(_x >> (8 * 4));\n        c = uint32(_x >> (8 * 8));\n    }\n}\n"
    },
    "@aragon/os/contracts/common/Autopetrified.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"./Petrifiable.sol\";\n\n\ncontract Autopetrified is Petrifiable {\n    constructor() public {\n        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\n        // This renders them uninitializable (and unusable without a proxy).\n        petrify();\n    }\n}\n"
    },
    "@aragon/os/contracts/common/ConversionHelpers.sol": {
      "content": "pragma solidity ^0.4.24;\n\n\nlibrary ConversionHelpers {\n    string private constant ERROR_IMPROPER_LENGTH = \"CONVERSION_IMPROPER_LENGTH\";\n\n    function dangerouslyCastUintArrayToBytes(uint256[] memory _input) internal pure returns (bytes memory output) {\n        // Force cast the uint256[] into a bytes array, by overwriting its length\n        // Note that the bytes array doesn't need to be initialized as we immediately overwrite it\n        // with the input and a new length. The input becomes invalid from this point forward.\n        uint256 byteLength = _input.length * 32;\n        assembly {\n            output := _input\n            mstore(output, byteLength)\n        }\n    }\n\n    function dangerouslyCastBytesToUintArray(bytes memory _input) internal pure returns (uint256[] memory output) {\n        // Force cast the bytes array into a uint256[], by overwriting its length\n        // Note that the uint256[] doesn't need to be initialized as we immediately overwrite it\n        // with the input and a new length. The input becomes invalid from this point forward.\n        uint256 intsLength = _input.length / 32;\n        require(_input.length == intsLength * 32, ERROR_IMPROPER_LENGTH);\n\n        assembly {\n            output := _input\n            mstore(output, intsLength)\n        }\n    }\n}\n"
    },
    "@aragon/os/contracts/common/ReentrancyGuard.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"../common/UnstructuredStorage.sol\";\n\n\ncontract ReentrancyGuard {\n    using UnstructuredStorage for bytes32;\n\n    /* Hardcoded constants to save gas\n    bytes32 internal constant REENTRANCY_MUTEX_POSITION = keccak256(\"aragonOS.reentrancyGuard.mutex\");\n    */\n    bytes32 private constant REENTRANCY_MUTEX_POSITION = 0xe855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb;\n\n    string private constant ERROR_REENTRANT = \"REENTRANCY_REENTRANT_CALL\";\n\n    modifier nonReentrant() {\n        // Ensure mutex is unlocked\n        require(!REENTRANCY_MUTEX_POSITION.getStorageBool(), ERROR_REENTRANT);\n\n        // Lock mutex before function call\n        REENTRANCY_MUTEX_POSITION.setStorageBool(true);\n\n        // Perform function call\n        _;\n\n        // Unlock mutex after function call\n        REENTRANCY_MUTEX_POSITION.setStorageBool(false);\n    }\n}\n"
    },
    "@aragon/os/contracts/common/VaultRecoverable.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"../lib/token/ERC20.sol\";\nimport \"./EtherTokenConstant.sol\";\nimport \"./IsContract.sol\";\nimport \"./IVaultRecoverable.sol\";\nimport \"./SafeERC20.sol\";\n\n\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\n    using SafeERC20 for ERC20;\n\n    string private constant ERROR_DISALLOWED = \"RECOVER_DISALLOWED\";\n    string private constant ERROR_VAULT_NOT_CONTRACT = \"RECOVER_VAULT_NOT_CONTRACT\";\n    string private constant ERROR_TOKEN_TRANSFER_FAILED = \"RECOVER_TOKEN_TRANSFER_FAILED\";\n\n    /**\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\n     *         but in case it does, this function allows one to recover them.\n     * @param _token Token balance to be sent to recovery vault.\n     */\n    function transferToVault(address _token) external {\n        require(allowRecoverability(_token), ERROR_DISALLOWED);\n        address vault = getRecoveryVault();\n        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\n\n        uint256 balance;\n        if (_token == ETH) {\n            balance = address(this).balance;\n            vault.transfer(balance);\n        } else {\n            ERC20 token = ERC20(_token);\n            balance = token.staticBalanceOf(this);\n            require(token.safeTransfer(vault, balance), ERROR_TOKEN_TRANSFER_FAILED);\n        }\n\n        emit RecoverToVault(vault, _token, balance);\n    }\n\n    /**\n    * @dev By default deriving from AragonApp makes it recoverable\n    * @param token Token address that would be recovered\n    * @return bool whether the app allows the recovery\n    */\n    function allowRecoverability(address token) public view returns (bool) {\n        return true;\n    }\n\n    // Cast non-implemented interface to be public so we can use it internally\n    function getRecoveryVault() public view returns (address);\n}\n"
    },
    "@aragon/os/contracts/evmscript/EVMScriptRunner.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"./IEVMScriptExecutor.sol\";\nimport \"./IEVMScriptRegistry.sol\";\n\nimport \"../apps/AppStorage.sol\";\nimport \"../kernel/KernelConstants.sol\";\nimport \"../common/Initializable.sol\";\n\n\ncontract EVMScriptRunner is AppStorage, Initializable, EVMScriptRegistryConstants, KernelNamespaceConstants {\n    string private constant ERROR_EXECUTOR_UNAVAILABLE = \"EVMRUN_EXECUTOR_UNAVAILABLE\";\n    string private constant ERROR_PROTECTED_STATE_MODIFIED = \"EVMRUN_PROTECTED_STATE_MODIFIED\";\n\n    /* This is manually crafted in assembly\n    string private constant ERROR_EXECUTOR_INVALID_RETURN = \"EVMRUN_EXECUTOR_INVALID_RETURN\";\n    */\n\n    event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData);\n\n    function getEVMScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\n        return IEVMScriptExecutor(getEVMScriptRegistry().getScriptExecutor(_script));\n    }\n\n    function getEVMScriptRegistry() public view returns (IEVMScriptRegistry) {\n        address registryAddr = kernel().getApp(KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\n        return IEVMScriptRegistry(registryAddr);\n    }\n\n    function runScript(bytes _script, bytes _input, address[] _blacklist)\n        internal\n        isInitialized\n        protectState\n        returns (bytes)\n    {\n        IEVMScriptExecutor executor = getEVMScriptExecutor(_script);\n        require(address(executor) != address(0), ERROR_EXECUTOR_UNAVAILABLE);\n\n        bytes4 sig = executor.execScript.selector;\n        bytes memory data = abi.encodeWithSelector(sig, _script, _input, _blacklist);\n\n        bytes memory output;\n        assembly {\n            let success := delegatecall(\n                gas,                // forward all gas\n                executor,           // address\n                add(data, 0x20),    // calldata start\n                mload(data),        // calldata length\n                0,                  // don't write output (we'll handle this ourselves)\n                0                   // don't write output\n            )\n\n            output := mload(0x40) // free mem ptr get\n\n            switch success\n            case 0 {\n                // If the call errored, forward its full error data\n                returndatacopy(output, 0, returndatasize)\n                revert(output, returndatasize)\n            }\n            default {\n                switch gt(returndatasize, 0x3f)\n                case 0 {\n                    // Need at least 0x40 bytes returned for properly ABI-encoded bytes values,\n                    // revert with \"EVMRUN_EXECUTOR_INVALID_RETURN\"\n                    // See remix: doing a `revert(\"EVMRUN_EXECUTOR_INVALID_RETURN\")` always results in\n                    // this memory layout\n                    mstore(output, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\n                    mstore(add(output, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\n                    mstore(add(output, 0x24), 0x000000000000000000000000000000000000000000000000000000000000001e) // reason length\n                    mstore(add(output, 0x44), 0x45564d52554e5f4558454355544f525f494e56414c49445f52455455524e0000) // reason\n\n                    revert(output, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\n                }\n                default {\n                    // Copy result\n                    //\n                    // Needs to perform an ABI decode for the expected `bytes` return type of\n                    // `executor.execScript()` as solidity will automatically ABI encode the returned bytes as:\n                    //    [ position of the first dynamic length return value = 0x20 (32 bytes) ]\n                    //    [ output length (32 bytes) ]\n                    //    [ output content (N bytes) ]\n                    //\n                    // Perform the ABI decode by ignoring the first 32 bytes of the return data\n                    let copysize := sub(returndatasize, 0x20)\n                    returndatacopy(output, 0x20, copysize)\n\n                    mstore(0x40, add(output, copysize)) // free mem ptr set\n                }\n            }\n        }\n\n        emit ScriptResult(address(executor), _script, _input, output);\n\n        return output;\n    }\n\n    modifier protectState {\n        address preKernel = address(kernel());\n        bytes32 preAppId = appId();\n        _; // exec\n        require(address(kernel()) == preKernel, ERROR_PROTECTED_STATE_MODIFIED);\n        require(appId() == preAppId, ERROR_PROTECTED_STATE_MODIFIED);\n    }\n}\n"
    },
    "@aragon/os/contracts/common/UnstructuredStorage.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\nlibrary UnstructuredStorage {\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\n        assembly { data := sload(position) }\n    }\n\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\n        assembly { data := sload(position) }\n    }\n\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\n        assembly { data := sload(position) }\n    }\n\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\n        assembly { data := sload(position) }\n    }\n\n    function setStorageBool(bytes32 position, bool data) internal {\n        assembly { sstore(position, data) }\n    }\n\n    function setStorageAddress(bytes32 position, address data) internal {\n        assembly { sstore(position, data) }\n    }\n\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\n        assembly { sstore(position, data) }\n    }\n\n    function setStorageUint256(bytes32 position, uint256 data) internal {\n        assembly { sstore(position, data) }\n    }\n}\n"
    },
    "@aragon/os/contracts/kernel/IKernel.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"../acl/IACL.sol\";\nimport \"../common/IVaultRecoverable.sol\";\n\n\ninterface IKernelEvents {\n    event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app);\n}\n\n\n// This should be an interface, but interfaces can't inherit yet :(\ncontract IKernel is IKernelEvents, IVaultRecoverable {\n    function acl() public view returns (IACL);\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\n\n    function setApp(bytes32 namespace, bytes32 appId, address app) public;\n    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\n}\n"
    },
    "@aragon/os/contracts/acl/IACL.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ninterface IACL {\n    function initialize(address permissionsCreator) external;\n\n    // TODO: this should be external\n    // See https://github.com/ethereum/solidity/issues/4832\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\n}\n"
    },
    "@aragon/os/contracts/common/IVaultRecoverable.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ninterface IVaultRecoverable {\n    event RecoverToVault(address indexed vault, address indexed token, uint256 amount);\n\n    function transferToVault(address token) external;\n\n    function allowRecoverability(address token) external view returns (bool);\n    function getRecoveryVault() external view returns (address);\n}\n"
    },
    "@aragon/os/contracts/common/Petrifiable.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"./Initializable.sol\";\n\n\ncontract Petrifiable is Initializable {\n    // Use block UINT256_MAX (which should be never) as the initializable date\n    uint256 internal constant PETRIFIED_BLOCK = uint256(-1);\n\n    function isPetrified() public view returns (bool) {\n        return getInitializationBlock() == PETRIFIED_BLOCK;\n    }\n\n    /**\n    * @dev Function to be called by top level contract to prevent being initialized.\n    *      Useful for freezing base contracts when they're used behind proxies.\n    */\n    function petrify() internal onlyInit {\n        initializedAt(PETRIFIED_BLOCK);\n    }\n}\n"
    },
    "@aragon/os/contracts/common/Initializable.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"./TimeHelpers.sol\";\nimport \"./UnstructuredStorage.sol\";\n\n\ncontract Initializable is TimeHelpers {\n    using UnstructuredStorage for bytes32;\n\n    // keccak256(\"aragonOS.initializable.initializationBlock\")\n    bytes32 internal constant INITIALIZATION_BLOCK_POSITION = 0xebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e;\n\n    string private constant ERROR_ALREADY_INITIALIZED = \"INIT_ALREADY_INITIALIZED\";\n    string private constant ERROR_NOT_INITIALIZED = \"INIT_NOT_INITIALIZED\";\n\n    modifier onlyInit {\n        require(getInitializationBlock() == 0, ERROR_ALREADY_INITIALIZED);\n        _;\n    }\n\n    modifier isInitialized {\n        require(hasInitialized(), ERROR_NOT_INITIALIZED);\n        _;\n    }\n\n    /**\n    * @return Block number in which the contract was initialized\n    */\n    function getInitializationBlock() public view returns (uint256) {\n        return INITIALIZATION_BLOCK_POSITION.getStorageUint256();\n    }\n\n    /**\n    * @return Whether the contract has been initialized by the time of the current block\n    */\n    function hasInitialized() public view returns (bool) {\n        uint256 initializationBlock = getInitializationBlock();\n        return initializationBlock != 0 && getBlockNumber() >= initializationBlock;\n    }\n\n    /**\n    * @dev Function to be called by top level contract after initialization has finished.\n    */\n    function initialized() internal onlyInit {\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(getBlockNumber());\n    }\n\n    /**\n    * @dev Function to be called by top level contract after initialization to enable the contract\n    *      at a future block number rather than immediately.\n    */\n    function initializedAt(uint256 _blockNumber) internal onlyInit {\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(_blockNumber);\n    }\n}\n"
    },
    "@aragon/os/contracts/common/TimeHelpers.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"./Uint256Helpers.sol\";\n\n\ncontract TimeHelpers {\n    using Uint256Helpers for uint256;\n\n    /**\n    * @dev Returns the current block number.\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\n    *      tests.\n    */\n    function getBlockNumber() internal view returns (uint256) {\n        return block.number;\n    }\n\n    /**\n    * @dev Returns the current block number, converted to uint64.\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\n    *      tests.\n    */\n    function getBlockNumber64() internal view returns (uint64) {\n        return getBlockNumber().toUint64();\n    }\n\n    /**\n    * @dev Returns the current timestamp.\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\n    *      tests.\n    */\n    function getTimestamp() internal view returns (uint256) {\n        return block.timestamp; // solium-disable-line security/no-block-members\n    }\n\n    /**\n    * @dev Returns the current timestamp, converted to uint64.\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\n    *      tests.\n    */\n    function getTimestamp64() internal view returns (uint64) {\n        return getTimestamp().toUint64();\n    }\n}\n"
    },
    "@aragon/os/contracts/common/Uint256Helpers.sol": {
      "content": "pragma solidity ^0.4.24;\n\n\nlibrary Uint256Helpers {\n    uint256 private constant MAX_UINT64 = uint64(-1);\n\n    string private constant ERROR_NUMBER_TOO_BIG = \"UINT64_NUMBER_TOO_BIG\";\n\n    function toUint64(uint256 a) internal pure returns (uint64) {\n        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\n        return uint64(a);\n    }\n}\n"
    },
    "@aragon/os/contracts/lib/token/ERC20.sol": {
      "content": "// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/a9f910d34f0ab33a1ae5e714f69f9596a02b4d91/contracts/token/ERC20/ERC20.sol\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n    function totalSupply() public view returns (uint256);\n\n    function balanceOf(address _who) public view returns (uint256);\n\n    function allowance(address _owner, address _spender)\n        public view returns (uint256);\n\n    function transfer(address _to, uint256 _value) public returns (bool);\n\n    function approve(address _spender, uint256 _value)\n        public returns (bool);\n\n    function transferFrom(address _from, address _to, uint256 _value)\n        public returns (bool);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n"
    },
    "@aragon/os/contracts/common/EtherTokenConstant.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\n// contracts where both tokens and ETH are accepted\ncontract EtherTokenConstant {\n    address internal constant ETH = address(0);\n}\n"
    },
    "@aragon/os/contracts/common/IsContract.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ncontract IsContract {\n    /*\n    * NOTE: this should NEVER be used for authentication\n    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\n    *\n    * This is only intended to be used as a sanity check that an address is actually a contract,\n    * RATHER THAN an address not being a contract.\n    */\n    function isContract(address _target) internal view returns (bool) {\n        if (_target == address(0)) {\n            return false;\n        }\n\n        uint256 size;\n        assembly { size := extcodesize(_target) }\n        return size > 0;\n    }\n}\n"
    },
    "@aragon/os/contracts/common/SafeERC20.sol": {
      "content": "// Inspired by AdEx (https://github.com/AdExNetwork/adex-protocol-eth/blob/b9df617829661a7518ee10f4cb6c4108659dd6d5/contracts/libs/SafeERC20.sol)\n// and 0x (https://github.com/0xProject/0x-monorepo/blob/737d1dc54d72872e24abce5a1dbe1b66d35fa21a/contracts/protocol/contracts/protocol/AssetProxy/ERC20Proxy.sol#L143)\n\npragma solidity ^0.4.24;\n\nimport \"../lib/token/ERC20.sol\";\n\n\nlibrary SafeERC20 {\n    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\n    // https://github.com/ethereum/solidity/issues/3544\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\n\n    string private constant ERROR_TOKEN_BALANCE_REVERTED = \"SAFE_ERC_20_BALANCE_REVERTED\";\n    string private constant ERROR_TOKEN_ALLOWANCE_REVERTED = \"SAFE_ERC_20_ALLOWANCE_REVERTED\";\n\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\n        private\n        returns (bool)\n    {\n        bool ret;\n        assembly {\n            let ptr := mload(0x40)    // free memory pointer\n\n            let success := call(\n                gas,                  // forward all gas\n                _addr,                // address\n                0,                    // no value\n                add(_calldata, 0x20), // calldata start\n                mload(_calldata),     // calldata length\n                ptr,                  // write output over free memory\n                0x20                  // uint256 return\n            )\n\n            if gt(success, 0) {\n                // Check number of bytes returned from last function call\n                switch returndatasize\n\n                // No bytes returned: assume success\n                case 0 {\n                    ret := 1\n                }\n\n                // 32 bytes returned: check if non-zero\n                case 0x20 {\n                    // Only return success if returned data was true\n                    // Already have output in ptr\n                    ret := eq(mload(ptr), 1)\n                }\n\n                // Not sure what was returned: don't mark as success\n                default { }\n            }\n        }\n        return ret;\n    }\n\n    function staticInvoke(address _addr, bytes memory _calldata)\n        private\n        view\n        returns (bool, uint256)\n    {\n        bool success;\n        uint256 ret;\n        assembly {\n            let ptr := mload(0x40)    // free memory pointer\n\n            success := staticcall(\n                gas,                  // forward all gas\n                _addr,                // address\n                add(_calldata, 0x20), // calldata start\n                mload(_calldata),     // calldata length\n                ptr,                  // write output over free memory\n                0x20                  // uint256 return\n            )\n\n            if gt(success, 0) {\n                ret := mload(ptr)\n            }\n        }\n        return (success, ret);\n    }\n\n    /**\n    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\n    *      Note that this makes an external call to the token.\n    */\n    function safeTransfer(ERC20 _token, address _to, uint256 _amount) internal returns (bool) {\n        bytes memory transferCallData = abi.encodeWithSelector(\n            TRANSFER_SELECTOR,\n            _to,\n            _amount\n        );\n        return invokeAndCheckSuccess(_token, transferCallData);\n    }\n\n    /**\n    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\n    *      Note that this makes an external call to the token.\n    */\n    function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\n        bytes memory transferFromCallData = abi.encodeWithSelector(\n            _token.transferFrom.selector,\n            _from,\n            _to,\n            _amount\n        );\n        return invokeAndCheckSuccess(_token, transferFromCallData);\n    }\n\n    /**\n    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\n    *      Note that this makes an external call to the token.\n    */\n    function safeApprove(ERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\n        bytes memory approveCallData = abi.encodeWithSelector(\n            _token.approve.selector,\n            _spender,\n            _amount\n        );\n        return invokeAndCheckSuccess(_token, approveCallData);\n    }\n\n    /**\n    * @dev Static call into ERC20.balanceOf().\n    * Reverts if the call fails for some reason (should never fail).\n    */\n    function staticBalanceOf(ERC20 _token, address _owner) internal view returns (uint256) {\n        bytes memory balanceOfCallData = abi.encodeWithSelector(\n            _token.balanceOf.selector,\n            _owner\n        );\n\n        (bool success, uint256 tokenBalance) = staticInvoke(_token, balanceOfCallData);\n        require(success, ERROR_TOKEN_BALANCE_REVERTED);\n\n        return tokenBalance;\n    }\n\n    /**\n    * @dev Static call into ERC20.allowance().\n    * Reverts if the call fails for some reason (should never fail).\n    */\n    function staticAllowance(ERC20 _token, address _owner, address _spender) internal view returns (uint256) {\n        bytes memory allowanceCallData = abi.encodeWithSelector(\n            _token.allowance.selector,\n            _owner,\n            _spender\n        );\n\n        (bool success, uint256 allowance) = staticInvoke(_token, allowanceCallData);\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\n\n        return allowance;\n    }\n\n    /**\n    * @dev Static call into ERC20.totalSupply().\n    * Reverts if the call fails for some reason (should never fail).\n    */\n    function staticTotalSupply(ERC20 _token) internal view returns (uint256) {\n        bytes memory totalSupplyCallData = abi.encodeWithSelector(_token.totalSupply.selector);\n\n        (bool success, uint256 totalSupply) = staticInvoke(_token, totalSupplyCallData);\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\n\n        return totalSupply;\n    }\n}\n"
    },
    "@aragon/os/contracts/evmscript/IEVMScriptExecutor.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ninterface IEVMScriptExecutor {\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\n    function executorType() external pure returns (bytes32);\n}\n"
    },
    "@aragon/os/contracts/evmscript/IEVMScriptRegistry.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"./IEVMScriptExecutor.sol\";\n\n\ncontract EVMScriptRegistryConstants {\n    /* Hardcoded constants to save gas\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\"evmreg\");\n    */\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\n}\n\n\ninterface IEVMScriptRegistry {\n    function addScriptExecutor(IEVMScriptExecutor executor) external returns (uint id);\n    function disableScriptExecutor(uint256 executorId) external;\n\n    // TODO: this should be external\n    // See https://github.com/ethereum/solidity/issues/4832\n    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\n}\n"
    },
    "@aragon/os/contracts/kernel/KernelConstants.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ncontract KernelAppIds {\n    /* Hardcoded constants to save gas\n    bytes32 internal constant KERNEL_CORE_APP_ID = apmNamehash(\"kernel\");\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash(\"acl\");\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash(\"vault\");\n    */\n    bytes32 internal constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\n}\n\n\ncontract KernelNamespaceConstants {\n    /* Hardcoded constants to save gas\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = keccak256(\"core\");\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = keccak256(\"base\");\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = keccak256(\"app\");\n    */\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\n}\n"
    },
    "@aragon/apps-agent/contracts/SignatureValidator.sol": {
      "content": "pragma solidity 0.4.24;\n\n// Inspired by https://github.com/horizon-games/multi-token-standard/blob/319740cf2a78b8816269ae49a09c537b3fd7303b/contracts/utils/SignatureValidator.sol\n// This should probably be moved into aOS: https://github.com/aragon/aragonOS/pull/442\n\nimport \"./standards/ERC1271.sol\";\n\n\nlibrary SignatureValidator {\n    enum SignatureMode {\n        Invalid, // 0x00\n        EIP712,  // 0x01\n        EthSign, // 0x02\n        ERC1271, // 0x03\n        NMode    // 0x04, to check if mode is specified, leave at the end\n    }\n\n    // bytes4(keccak256(\"isValidSignature(bytes,bytes)\")\n    bytes4 public constant ERC1271_RETURN_VALID_SIGNATURE = 0x20c13b0b;\n    uint256 internal constant ERC1271_ISVALIDSIG_MAX_GAS = 250000;\n\n    string private constant ERROR_INVALID_LENGTH_POP_BYTE = \"SIGVAL_INVALID_LENGTH_POP_BYTE\";\n\n    /// @dev Validates that a hash was signed by a specified signer.\n    /// @param hash Hash which was signed.\n    /// @param signer Address of the signer.\n    /// @param signature ECDSA signature along with the mode (0 = Invalid, 1 = EIP712, 2 = EthSign, 3 = ERC1271) {mode}{r}{s}{v}.\n    /// @return Returns whether signature is from a specified user.\n    function isValidSignature(bytes32 hash, address signer, bytes signature) internal view returns (bool) {\n        if (signature.length == 0) {\n            return false;\n        }\n\n        uint8 modeByte = uint8(signature[0]);\n        if (modeByte >= uint8(SignatureMode.NMode)) {\n            return false;\n        }\n        SignatureMode mode = SignatureMode(modeByte);\n\n        if (mode == SignatureMode.EIP712) {\n            return ecVerify(hash, signer, signature);\n        } else if (mode == SignatureMode.EthSign) {\n            return ecVerify(\n                keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)),\n                signer,\n                signature\n            );\n        } else if (mode == SignatureMode.ERC1271) {\n            // Pop the mode byte before sending it down the validation chain\n            return safeIsValidSignature(signer, hash, popFirstByte(signature));\n        } else {\n            return false;\n        }\n    }\n\n    function ecVerify(bytes32 hash, address signer, bytes memory signature) private pure returns (bool) {\n        (bool badSig, bytes32 r, bytes32 s, uint8 v) = unpackEcSig(signature);\n\n        if (badSig) {\n            return false;\n        }\n\n        return signer == ecrecover(hash, v, r, s);\n    }\n\n    function unpackEcSig(bytes memory signature) private pure returns (bool badSig, bytes32 r, bytes32 s, uint8 v) {\n        if (signature.length != 66) {\n            badSig = true;\n            return;\n        }\n\n        v = uint8(signature[65]);\n        assembly {\n            r := mload(add(signature, 33))\n            s := mload(add(signature, 65))\n        }\n\n        // Allow signature version to be 0 or 1\n        if (v < 27) {\n            v += 27;\n        }\n\n        if (v != 27 && v != 28) {\n            badSig = true;\n        }\n    }\n\n    function popFirstByte(bytes memory input) private pure returns (bytes memory output) {\n        uint256 inputLength = input.length;\n        require(inputLength > 0, ERROR_INVALID_LENGTH_POP_BYTE);\n\n        output = new bytes(inputLength - 1);\n\n        if (output.length == 0) {\n            return output;\n        }\n\n        uint256 inputPointer;\n        uint256 outputPointer;\n        assembly {\n            inputPointer := add(input, 0x21)\n            outputPointer := add(output, 0x20)\n        }\n        memcpy(outputPointer, inputPointer, output.length);\n    }\n\n    function safeIsValidSignature(address validator, bytes32 hash, bytes memory signature) private view returns (bool) {\n        bytes memory data = abi.encodeWithSelector(ERC1271(validator).isValidSignature.selector, hash, signature);\n        bytes4 erc1271Return = safeBytes4StaticCall(validator, data, ERC1271_ISVALIDSIG_MAX_GAS);\n        return erc1271Return == ERC1271_RETURN_VALID_SIGNATURE;\n    }\n\n    function safeBytes4StaticCall(address target, bytes data, uint256 maxGas) private view returns (bytes4 ret) {\n        uint256 gasLeft = gasleft();\n\n        uint256 callGas = gasLeft > maxGas ? maxGas : gasLeft;\n        bool ok;\n        assembly {\n            ok := staticcall(callGas, target, add(data, 0x20), mload(data), 0, 0)\n        }\n\n        if (!ok) {\n            return;\n        }\n\n        uint256 size;\n        assembly { size := returndatasize }\n        if (size != 32) {\n            return;\n        }\n\n        assembly {\n            let ptr := mload(0x40)       // get next free memory ptr\n            returndatacopy(ptr, 0, size) // copy return from above `staticcall`\n            ret := mload(ptr)            // read data at ptr and set it to be returned\n        }\n\n        return ret;\n    }\n\n    // From: https://github.com/Arachnid/solidity-stringutils/blob/01e955c1d6/src/strings.sol\n    function memcpy(uint256 dest, uint256 src, uint256 len) private pure {\n        // Copy word-length chunks while possible\n        for (; len >= 32; len -= 32) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n            dest += 32;\n            src += 32;\n        }\n\n        // Copy remaining bytes\n        uint mask = 256 ** (32 - len) - 1;\n        assembly {\n            let srcpart := and(mload(src), not(mask))\n            let destpart := and(mload(dest), mask)\n            mstore(dest, or(destpart, srcpart))\n        }\n    }\n}\n"
    },
    "@aragon/apps-agent/contracts/standards/IERC165.sol": {
      "content": "pragma solidity 0.4.24;\n\n\ninterface IERC165 {\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool);\n}\n"
    },
    "@aragon/apps-agent/contracts/standards/ERC1271.sol": {
      "content": "pragma solidity 0.4.24;\n\n// ERC1271 on Feb 12th, 2019: https://github.com/ethereum/EIPs/blob/a97dc434930d0ccc4461c97d8c7a920dc585adf2/EIPS/eip-1271.md\n// Using `isValidSignature(bytes32,bytes)` even though the standard still hasn't been modified\n// Rationale: https://github.com/ethereum/EIPs/issues/1271#issuecomment-462719728\n\n\ncontract ERC1271 {\n    bytes4 constant public ERC1271_INTERFACE_ID = 0xfb855dc9; // this.isValidSignature.selector\n\n    bytes4 constant public ERC1271_RETURN_VALID_SIGNATURE =   0x20c13b0b; // TODO: Likely needs to be updated\n    bytes4 constant public ERC1271_RETURN_INVALID_SIGNATURE = 0x00000000;\n\n    /**\n    * @dev Function must be implemented by deriving contract\n    * @param _hash Arbitrary length data signed on the behalf of address(this)\n    * @param _signature Signature byte array associated with _data\n    * @return A bytes4 magic value 0x20c13b0b if the signature check passes, 0x00000000 if not\n    *\n    * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\n    * MUST allow external calls\n    */\n    function isValidSignature(bytes32 _hash, bytes memory _signature) public view returns (bytes4);\n\n    function returnIsValidSignatureMagicNumber(bool isValid) internal pure returns (bytes4) {\n        return isValid ? ERC1271_RETURN_VALID_SIGNATURE : ERC1271_RETURN_INVALID_SIGNATURE;\n    }\n}\n\n\ncontract ERC1271Bytes is ERC1271 {\n    /**\n    * @dev Default behavior of `isValidSignature(bytes,bytes)`, can be overloaded for custom validation\n    * @param _data Arbitrary length data signed on the behalf of address(this)\n    * @param _signature Signature byte array associated with _data\n    * @return A bytes4 magic value 0x20c13b0b if the signature check passes, 0x00000000 if not\n    *\n    * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\n    * MUST allow external calls\n    */\n    function isValidSignature(bytes _data, bytes _signature) public view returns (bytes4) {\n        return isValidSignature(keccak256(_data), _signature);\n    }\n}\n"
    },
    "@aragon/apps-agent/contracts/standards/IERC721Receiver.sol": {
      "content": "pragma solidity 0.4.24;\n\n\ninterface IERC721Receiver {\n    /**\n     * @notice Handle the receipt of an NFT\n     * @dev The ERC721 smart contract calls this function on the recipient\n     * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\n     * otherwise the caller will revert the transaction. The selector to be\n     * returned can be obtained as `this.onERC721Received.selector`. This\n     * function MAY throw to revert and reject the transfer.\n     * Note: the ERC721 contract address is always the message sender.\n     * @param operator The address which called `safeTransferFrom` function\n     * @param from The address which previously owned the token\n     * @param tokenId The NFT identifier which is being transferred\n     * @param data Additional data with no specified format\n     * @return bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes data) external returns (bytes4);\n}\n"
    },
    "@aragon/apps-vault/contracts/Vault.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"@aragon/os/contracts/apps/AragonApp.sol\";\nimport \"@aragon/os/contracts/common/DepositableStorage.sol\";\nimport \"@aragon/os/contracts/common/EtherTokenConstant.sol\";\nimport \"@aragon/os/contracts/common/SafeERC20.sol\";\nimport \"@aragon/os/contracts/lib/token/ERC20.sol\";\n\n\ncontract Vault is EtherTokenConstant, AragonApp, DepositableStorage {\n    using SafeERC20 for ERC20;\n\n    bytes32 public constant TRANSFER_ROLE = keccak256(\"TRANSFER_ROLE\");\n\n    string private constant ERROR_DATA_NON_ZERO = \"VAULT_DATA_NON_ZERO\";\n    string private constant ERROR_NOT_DEPOSITABLE = \"VAULT_NOT_DEPOSITABLE\";\n    string private constant ERROR_DEPOSIT_VALUE_ZERO = \"VAULT_DEPOSIT_VALUE_ZERO\";\n    string private constant ERROR_TRANSFER_VALUE_ZERO = \"VAULT_TRANSFER_VALUE_ZERO\";\n    string private constant ERROR_SEND_REVERTED = \"VAULT_SEND_REVERTED\";\n    string private constant ERROR_VALUE_MISMATCH = \"VAULT_VALUE_MISMATCH\";\n    string private constant ERROR_TOKEN_TRANSFER_FROM_REVERTED = \"VAULT_TOKEN_TRANSFER_FROM_REVERT\";\n    string private constant ERROR_TOKEN_TRANSFER_REVERTED = \"VAULT_TOKEN_TRANSFER_REVERTED\";\n\n    event VaultTransfer(address indexed token, address indexed to, uint256 amount);\n    event VaultDeposit(address indexed token, address indexed sender, uint256 amount);\n\n    /**\n    * @dev On a normal send() or transfer() this fallback is never executed as it will be\n    *      intercepted by the Proxy (see aragonOS#281)\n    */\n    function () external payable isInitialized {\n        require(msg.data.length == 0, ERROR_DATA_NON_ZERO);\n        _deposit(ETH, msg.value);\n    }\n\n    /**\n    * @notice Initialize Vault app\n    * @dev As an AragonApp it needs to be initialized in order for roles (`auth` and `authP`) to work\n    */\n    function initialize() external onlyInit {\n        initialized();\n        setDepositable(true);\n    }\n\n    /**\n    * @notice Deposit `_value` `_token` to the vault\n    * @param _token Address of the token being transferred\n    * @param _value Amount of tokens being transferred\n    */\n    function deposit(address _token, uint256 _value) external payable isInitialized {\n        _deposit(_token, _value);\n    }\n\n    /**\n    * @notice Transfer `_value` `_token` from the Vault to `_to`\n    * @param _token Address of the token being transferred\n    * @param _to Address of the recipient of tokens\n    * @param _value Amount of tokens being transferred\n    */\n    /* solium-disable-next-line function-order */\n    function transfer(address _token, address _to, uint256 _value)\n        external\n        authP(TRANSFER_ROLE, arr(_token, _to, _value))\n    {\n        require(_value > 0, ERROR_TRANSFER_VALUE_ZERO);\n\n        if (_token == ETH) {\n            require(_to.send(_value), ERROR_SEND_REVERTED);\n        } else {\n            require(ERC20(_token).safeTransfer(_to, _value), ERROR_TOKEN_TRANSFER_REVERTED);\n        }\n\n        emit VaultTransfer(_token, _to, _value);\n    }\n\n    function balance(address _token) public view returns (uint256) {\n        if (_token == ETH) {\n            return address(this).balance;\n        } else {\n            return ERC20(_token).staticBalanceOf(address(this));\n        }\n    }\n\n    /**\n    * @dev Disable recovery escape hatch, as it could be used\n    *      maliciously to transfer funds away from the vault\n    */\n    function allowRecoverability(address) public view returns (bool) {\n        return false;\n    }\n\n    function _deposit(address _token, uint256 _value) internal {\n        require(isDepositable(), ERROR_NOT_DEPOSITABLE);\n        require(_value > 0, ERROR_DEPOSIT_VALUE_ZERO);\n\n        if (_token == ETH) {\n            // Deposit is implicit in this case\n            require(msg.value == _value, ERROR_VALUE_MISMATCH);\n        } else {\n            require(\n                ERC20(_token).safeTransferFrom(msg.sender, address(this), _value),\n                ERROR_TOKEN_TRANSFER_FROM_REVERTED\n            );\n        }\n\n        emit VaultDeposit(_token, msg.sender, _value);\n    }\n}\n"
    },
    "@aragon/os/contracts/common/IForwarder.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ninterface IForwarder {\n    function isForwarder() external pure returns (bool);\n\n    // TODO: this should be external\n    // See https://github.com/ethereum/solidity/issues/4832\n    function canForward(address sender, bytes evmCallScript) public view returns (bool);\n\n    // TODO: this should be external\n    // See https://github.com/ethereum/solidity/issues/4832\n    function forward(bytes evmCallScript) public;\n}\n"
    },
    "@aragon/os/contracts/common/DepositableStorage.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"./UnstructuredStorage.sol\";\n\n\ncontract DepositableStorage {\n    using UnstructuredStorage for bytes32;\n\n    // keccak256(\"aragonOS.depositableStorage.depositable\")\n    bytes32 internal constant DEPOSITABLE_POSITION = 0x665fd576fbbe6f247aff98f5c94a561e3f71ec2d3c988d56f12d342396c50cea;\n\n    function isDepositable() public view returns (bool) {\n        return DEPOSITABLE_POSITION.getStorageBool();\n    }\n\n    function setDepositable(bool _depositable) internal {\n        DEPOSITABLE_POSITION.setStorageBool(_depositable);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 10000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}